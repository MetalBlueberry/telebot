package main

import (
	"context"
	"encoding/json"
	"log"
	"os"

	"github.com/aws/aws-lambda-go/lambda"
	"gopkg.in/telebot.v3"
)

func main() {
	botToken := os.Getenv("TOKEN")
	if botToken == "" {
		log.Fatal("TOKEN must be defined")
	}
	pref := telebot.Settings{
		Token:       botToken,
		Synchronous: true,
	}

	b, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}
	b.Handle(telebot.OnText, func(ctx telebot.Context) error {
		// Echo
		return ctx.Send(ctx.Text())
	})

	lambda.Start(func(ctx context.Context, request Request) error {
		log.Println("Handling request")

		update := telebot.Update{}
		err := json.Unmarshal([]byte(request.Body), &update)
		if err != nil {
			return err
		}

		log.Println("Processing update, ", update.ID)
		b.ProcessUpdate(update)
		return nil
	})
}

// Generated by https://quicktype.io

type Request struct {
	Version               string            `json:"version"`
	RouteKey              string            `json:"routeKey"`
	RawPath               string            `json:"rawPath"`
	RawQueryString        string            `json:"rawQueryString"`
	Cookies               []string          `json:"cookies"`
	Headers               map[string]string `json:"headers"`
	QueryStringParameters map[string]string `json:"queryStringParameters"`
	RequestContext        RequestContext    `json:"requestContext"`
	Body                  string            `json:"body"`
	PathParameters        interface{}       `json:"pathParameters"`
	IsBase64Encoded       bool              `json:"isBase64Encoded"`
	StageVariables        interface{}       `json:"stageVariables"`
}

type RequestContext struct {
	AccountID      string      `json:"accountId"`
	APIID          string      `json:"apiId"`
	Authentication interface{} `json:"authentication"`
	Authorizer     Authorizer  `json:"authorizer"`
	DomainName     string      `json:"domainName"`
	DomainPrefix   string      `json:"domainPrefix"`
	HTTP           HTTP        `json:"http"`
	RequestID      string      `json:"requestId"`
	RouteKey       string      `json:"routeKey"`
	Stage          string      `json:"stage"`
	Time           string      `json:"time"`
	TimeEpoch      int64       `json:"timeEpoch"`
}

type Authorizer struct {
	Iam Iam `json:"iam"`
}

type Iam struct {
	AccessKey       string      `json:"accessKey"`
	AccountID       string      `json:"accountId"`
	CallerID        string      `json:"callerId"`
	CognitoIdentity interface{} `json:"cognitoIdentity"`
	PrincipalOrgID  interface{} `json:"principalOrgId"`
	UserArn         string      `json:"userArn"`
	UserID          string      `json:"userId"`
}

type HTTP struct {
	Method    string `json:"method"`
	Path      string `json:"path"`
	Protocol  string `json:"protocol"`
	SourceIP  string `json:"sourceIp"`
	UserAgent string `json:"userAgent"`
}
